name 'corridor_planner'

import_types_from "base"

using_library 'corridor_planner'
# corridors.hh is installed by the corridor_planner library
import_types_from "corridor_planner/corridors.hh"
import_types_from "FilterConfigTypes.hpp"
import_types_from "TerrainInfo.hpp"
import_types_from "envire"
using_library "envire"

typekit.export_types '/corridors/Corridor'

task_context 'Task' do
    needs_configuration

    property('map_path', 'string').
        doc "when using an on-disk envire environment, this is the path to the environment. Otherwise, leave empty and send the map through the map input port."
    property("map_id", "std/string", "/corridor_planner/traversability").
        doc "the map ID of the traversability map that should be used for planning"
    property("map_band", "std/string", "").
        doc "the band name in the traversability map that should be used as the underlying data"

    property('terrain_classes', 'string').
        doc "path to the terrain class definition file"
    property('start_point',  'base/Vector3d').
        doc "starting point in world coordinates"
    property('target_point', 'base/Vector3d').
        doc "target point in world coordinates"
    property('cost_cutoff', 'double', 1e6).
        doc "cost above which the search is aborted"
    property('margin', 'double', 1.1).
        doc "allowed cost margin, as a rate w.r.t. the optimal cost (i.e. 1.1 means 10% above optimal)"
    property('min_width', 'double', 0).
        doc "minimum width at which a corridor can be traversed, in meters"

    property('enable_strong_edge_filter', 'bool', false)
    property('strong_edge_filter', 'corridor_planner/StrongEdgeFilterConfig')

    property('enable_narrow_wide_filter', 'bool', false)
    property('narrow_wide_filter', 'corridor_planner/NarrowWideFilterConfig')

    property('enable_known_unknown_filter', 'bool', false)
    property('known_unknown_filter', 'corridor_planner/KnownUnknownFilterConfig')

    input_port('map', ro_ptr('std/vector</envire/BinaryEvent>')).
	doc("Current map")

    runtime_states :dstar, # the task is running the D* pass
        :skeleton, # the task is running the skeleton extraction pass
        :plan, # the task is running the plan generation pass
        :plan_simplification, # the task is running the plan simplification pass
        :annotations # the task is running the annotation pass

    error_states :wait_for_map

    exception_states :no_solution

    output_port 'plan', 'corridors/Plan'

    port_driven
end

