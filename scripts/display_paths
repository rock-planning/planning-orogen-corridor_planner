#! /usr/bin/env ruby

require 'orocos'
require 'widget_grid'
require 'eigen'
ENV['PKG_CONFIG_PATH'] = "#{File.expand_path(File.dirname(__FILE__), File.join('..', 'build'))}:#{ENV['PKG_CONFIG_PATH']}"
Orocos.initialize

def usage
    STDERR.puts "run_following_test <logfile> [stream_name]"
    STDERR.puts "where <logfile> contains either a stream of type /corridors/Corridor_m"
    STDERR.puts "or a stream of type /corridors/Plan_m. If stream_name is given, it will"
    STDERR.puts "be used"
end

if ARGV.empty?
    usage
    exit(1)
end

def do_test(follower, plan, initial_path_idx = 0)
    Orocos.log_all
    gui = WidgetGrid.new

    all_paths = plan.all_paths

    base_dir = File.expand_path(File.dirname(__FILE__))
    widget = gui.display(follower.debugVfhTree, :env => File.join(base_dir, 'track-simple'), :pointcloud => [1, 100, 100, 0.25, 0.25], :position => :center)
    widget.setTreeCostMode(0)
    widget.removeTreeLeaves(false)
    widget.updateCorridorPlan(plan)

    path_idx = initial_path_idx
    path_update = true
    current_path = nil
    corridor_count = nil

    next_path = Qt::PushButton.new("Next path (current=#{path_idx})")
    more_corridors = Qt::PushButton.new("More")
    less_corridors = Qt::PushButton.new("Less")
    next_path.connect(SIGNAL(:clicked)) do
        path_idx += 1
        if path_idx == all_paths.size
            path_idx = 0
        end
        next_path.text = "Next path (current=#{path_idx})"
        path_update = true
        corridor_count = nil
    end
    more_corridors.connect(SIGNAL(:clicked)) do
        corridor_count += 1
        if corridor_count > current_path.size
            corridor_count = current_path.size
        end
        path_update = true
    end
    less_corridors.connect(SIGNAL(:clicked)) do
        corridor_count -= 1
        if corridor_count < 0
            corridor_count = 0
        end
        path_update = true
    end


    buttons = Qt::Widget.new
    v_layout = Qt::VBoxLayout.new(buttons)
    v_layout.add_widget next_path
    v_layout.add_widget more_corridors
    v_layout.add_widget less_corridors
    buttons.show

    gui.run(100) do
        if path_update
            current_path = all_paths[path_idx]
            corridor_count ||= current_path.size
            path = current_path[0, corridor_count]
            current_corridor = plan.path_to_corridor(path)
            widget.updateSelectedCorridor(current_corridor)
            path_update = false
        end
    end
end

logfile     = ARGV.shift
stream_name = nil
initial_path = Integer(ARGV.shift || 0)
logfile = Pocolog::Logfiles.open(logfile)

stream =
    if stream_name
        logfile.stream(stream_name)
    else
        logfile.streams.find { |s| s.type.name == '/corridors/Corridor_m' } ||
            logfile.streams.find { |s| s.type.name == '/corridors/Plan_m' }
    end

samples = stream.samples.to_a
if samples.empty?
    raise "no sample found"
end

data = samples.first.last

begin
    follower = Orocos::TaskContext.get 'corridor_following'
    do_test(follower, data, initial_path)
rescue Orocos::NotFound
    Orocos.run 'corridorNavigationTest' do
        follower = Orocos::TaskContext.get 'corridor_following'
        do_test(follower, data, initial_path)
    end
end

