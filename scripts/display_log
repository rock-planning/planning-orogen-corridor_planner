#! /usr/bin/env ruby

require 'orocos'
Orocos.initialize
Orocos.load_typekit 'corridor_planner'

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__))
require 'vizkit'
require 'corridor_plan_controls'
require 'envire/raster_map_view'
require 'optparse'
include Orocos

task_name = nil
opt_parse = OptionParser.new do |opt|
    opt.banner = "display <log_file|-t task> [mls_env]"
    opt.on('-t TASK_NAME', String, 'connect to the given task instead of starting our own') do |name|
        task_name = name
    end
end

remaining = opt_parse.parse(ARGV)
if task_name
    mls_env = remaining.shift
else
    logfile = remaining.shift
    mls_env = remaining.shift
    if !logfile
        puts opt_parse
        exit 1
    end
end

if !remaining.empty?
    puts opt_parse
    exit 1
end

require 'pocolog'
BASE_DIR = File.expand_path('..', File.dirname(__FILE__))

# Get the UI
main = Vizkit.default_loader.load(File.join(BASE_DIR, "scripts", "corridor_planner.ui"))
main.extend CorridorPlanControls
main.setupUI
if mls_env
    main.mls_env = mls_env
end
main.map_view.hide

def update(main, plan)
    plan.cleanup_annotations("STRONG_EDGE", 1 => [1, 0.2])
    plan.cleanup_annotations("NARROW_WIDE", 1 => [1, 0.2])
    plan.annotate_corridor_segments("STRONG_EDGE", 1, "STRONG_EDGE")
    plan.cleanup_annotations("STRONG_EDGE", 1 => [1, 0.2])
    plan.intersect_annotations("STRONG_EDGE", 1, "NARROW_WIDE", 0, "CORRIDOR_SERVOING")
    plan.cleanup_annotations("CORRIDOR_SERVOING", 0 => [2, 0.2])
    main.plan = plan
end

main.show
main.view3d.show

if task_name
    planner_task = Orocos::TaskContext.get task_name
    planner_task.plan.connect_to do |sample|
        update(main, sample)
    end
else
    require 'pocolog'
    file = Pocolog::Logfiles.open(logfile)
    stream = file.stream_from_type(Types::Corridors::Plan)
    data = stream.first.last

    update(main, data)
end
Vizkit.exec

