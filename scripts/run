#! /usr/bin/env ruby

require 'orocos'
Orocos.initialize
Orocos.load_typekit 'corridor_planner'

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__))
require 'vizkit'
require 'corridor_plan_controls'
require 'envire/raster_map_view'
require 'optparse'
include Orocos

task_name = nil
strong_edge_path, strong_edge_map, strong_edge_band, strong_edge_threshold = nil
problem = nil
min_width = nil
narrow_threshold, wide_threshold = nil

opt_parse = OptionParser.new do |opt|
    opt.banner = "run [options] <map_file> <classes_file> <expand_factor> [mls_env]"
    opt.on('-t TASK_NAME', String, 'connect to the given task instead of starting our own') do |name|
        task_name = name
    end
    opt.on('--narrow-wide NARROW_THRESHOLD:WIDE_THRESHOLD', String, 'run a narrow/wide annotation filter on the resulting corridors') do |config|
        config = config.split(':')
        narrow_threshold = Float(config[0])
        wide_threshold   = Float(config[1])
    end

    opt.on('--strong-edge PATH:MAP:BAND:THRESHOLD', String, 'run a strong edge annotation filter on the resulting corridors') do |config|
        config = config.split(':')
        strong_edge_path = config[0]
        strong_edge_map = Integer(config[1])
        strong_edge_band = config[2]
        strong_edge_threshold = Float(config[3])
    end

    opt.on('--min-width=WIDTH', Float) do |value|
        min_width = value
    end

    opt.on('--problem=START_X:START_Y:GOAL_X:GOAL_Y', String, 'specifies the start and goal points instead of using the point-and-click GUI') do |problem|
        problem = problem.split(':').map { |v| Float(v) }
        problem = [
            Eigen::Vector3.new(problem[0], problem[1], 0),
            Eigen::Vector3.new(problem[2], problem[3], 0)]
    end
end

remaining = opt_parse.parse(ARGV)
if remaining.size != 3 && remaining.size != 4
    puts opt_parse
    exit 1
end

require 'envire/gdal'

BASE_DIR = File.expand_path('..', File.dirname(__FILE__))
ENV['PKG_CONFIG_PATH'] = "#{File.join(BASE_DIR, 'build')}:#{ENV['PKG_CONFIG_PATH']}"

map_path     = File.expand_path(remaining.shift)
classes_path = File.expand_path(remaining.shift)
if !File.exists?(classes_path)
    STDERR.puts "#{classes_path} does not exist"
    exit 1
end
if !File.exists?(map_path)
    STDERR.puts "#{map_path} does not exist"
    exit 1
end
expand_factor        = Float(remaining.shift)
mls_env = remaining.shift

# Get the UI
main = Vizkit.default_loader.load(File.join(BASE_DIR, "scripts", "corridor_planner.ui"))
main.extend CorridorPlanControls
main.setupUI
main.map_path = map_path
if mls_env
    main.mls_env = mls_env
end
main.classes_path = classes_path
main.min_width = min_width
main.expand_factor = expand_factor
if strong_edge_path
    main.enable_strong_edge_filter(strong_edge_path, strong_edge_map, strong_edge_band, strong_edge_threshold)
end
if narrow_threshold
    main.enable_narrow_wide_filter(narrow_threshold, wide_threshold)
end

# Set the image view up so that we pick the start point / target point there
start_point, target_point = nil, nil
# Planner task is set at the end of the script
planner_task = nil

main.status.setText("select start point")
main.map_view.connect(SIGNAL('clickImage(int,int)')) do |x, y|
    if !start_point
        start_point = main.map_view.viewToMap(x, y)
        puts "start point: #{start_point.inspect} (pixels=#{x} #{y})"
        main.status.setText("select target point")
        main.view3d.centralWidget.setCameraLookAt(start_point[0], start_point[1], 0)
        main.view3d.centralWidget.setCameraEye(start_point[0], start_point[1], 10)
    else
        target_point = main.map_view.viewToMap(x, y)
        puts "target point: #{target_point.inspect} (pixels=#{x} #{y})"
        main.compute(planner_task, start_point, target_point) do |plan|
            plan.cleanup_annotations("STRONG_EDGE", 1 => [1, 0.2])
            plan.cleanup_annotations("NARROW_WIDE", 1 => [1, 0.2])
            plan.annotate_corridor_segments("STRONG_EDGE", 1, "STRONG_EDGE")
            plan.cleanup_annotations("STRONG_EDGE", 1 => [1, 0.2])
            plan.intersect_annotations("STRONG_EDGE", 1, "NARROW_WIDE", 0, "CORRIDOR_SERVOING")
            plan.cleanup_annotations("CORRIDOR_SERVOING", 1 => [1, 0.2])
        end
        start_point = target_point = nil
    end
end

def common_setup(main, planner_task, problem)
    main.show
    main.view3d.show
    if problem
        main.compute(planner_task, problem[0], problem[1]) do |plan|
            plan.cleanup_annotations("STRONG_EDGE", 1 => [1, 0.2])
            plan.cleanup_annotations("NARROW_WIDE", 1 => [1, 0.2])
            plan.annotate_corridor_segments("STRONG_EDGE", 1, "STRONG_EDGE")
            plan.cleanup_annotations("STRONG_EDGE", 1 => [1, 0.2])
            plan.intersect_annotations("STRONG_EDGE", 1, "NARROW_WIDE", 0, "CORRIDOR_SERVOING")
            plan.cleanup_annotations("CORRIDOR_SERVOING", 1 => [1, 0.2])
        end
    end
end

if task_name
    planner_task = Orocos::TaskContext.get task_name
    common_setup(main, planner_task)
    Vizkit.exec
else
    Orocos::Process.spawn 'test_corridor_planner', :output => 'cplanner-log.txt' do |p|
        planner_task = p.task('planner')
        Orocos.log_all_ports
        Orocos.log_all_configuration
        common_setup(main, planner_task, problem)
        Vizkit.exec
    end
end

